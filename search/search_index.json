{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FileUrlSplit https://wbin01.github.io/fileurlsplit A python class that handles file URL splits such as path, name and extension. No dependencies, just use the standard library. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> >>> file_url.url '/home/user/photo.png' >>> >>> file_url.path '/home/user/' >>> >>> file_url.name 'photo' >>> >>> file_url.filename 'photo.png' >>> >>> file_url.extension '.png' >>> >>> print(f\"'{file_url.url}', '{file_url.filename}', '{file_url.extension}'\") '/home/user/photo.png', 'photo.png', '.png' >>> >>> file_url.extension = 'jpg' >>> >>> print(f\"'{file_url.url}', '{file_url.filename}', '{file_url.extension}'\") '/home/user/photo.jpg', 'photo.jpg', '.jpg'","title":"Home"},{"location":"#fileurlsplit","text":"https://wbin01.github.io/fileurlsplit A python class that handles file URL splits such as path, name and extension. No dependencies, just use the standard library. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> >>> file_url.url '/home/user/photo.png' >>> >>> file_url.path '/home/user/' >>> >>> file_url.name 'photo' >>> >>> file_url.filename 'photo.png' >>> >>> file_url.extension '.png' >>> >>> print(f\"'{file_url.url}', '{file_url.filename}', '{file_url.extension}'\") '/home/user/photo.png', 'photo.png', '.png' >>> >>> file_url.extension = 'jpg' >>> >>> print(f\"'{file_url.url}', '{file_url.filename}', '{file_url.extension}'\") '/home/user/photo.jpg', 'photo.jpg', '.jpg'","title":"FileUrlSplit"},{"location":"about/","text":"Sources https://github.com/wbin01/fileurlsplit","title":"About"},{"location":"about/#sources","text":"https://github.com/wbin01/fileurlsplit","title":"Sources"},{"location":"exceptions/","text":"Exceptions The AbsolutePathError exception can be raised when the path and url setters are used. The other exceptions can be raised by all setters . AbsolutePathError AbsolutePathError(message: str) message: str Raised when a passed URL doesn't have an absolute path prefix like a slash \"/\" or \"file://\". message : A message about the error InvalidCharacterError InvalidCharacterError( message: str, invalid_character_found: str, all_invalid_characters_list: list) message: str invalid_character_found: str all_invalid_characters_list: list Raised when the string contains a character not allowed. message : A message about the error invalid_character_found : The character that caused the error all_invalid_characters_list : String list of all disallowed characters InvalidFilenameError InvalidFilenameError(message: str, all_invalid_filename_list: list) message: str all_invalid_filename_list: list Raised when the name is reserved for the exclusive use of the operating system. message : A message about the error all_invalid_filename_list : String list of all disallowed filenames FilenameTooLongError FilenameTooLongError(message: str) message: str Raised when the filename (with extension) is too long. Usually longer than 255 characters. message : A message about the error","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"The AbsolutePathError exception can be raised when the path and url setters are used. The other exceptions can be raised by all setters .","title":"Exceptions"},{"location":"exceptions/#absolutepatherror","text":"AbsolutePathError(message: str) message: str Raised when a passed URL doesn't have an absolute path prefix like a slash \"/\" or \"file://\". message : A message about the error","title":"AbsolutePathError"},{"location":"exceptions/#invalidcharactererror","text":"InvalidCharacterError( message: str, invalid_character_found: str, all_invalid_characters_list: list) message: str invalid_character_found: str all_invalid_characters_list: list Raised when the string contains a character not allowed. message : A message about the error invalid_character_found : The character that caused the error all_invalid_characters_list : String list of all disallowed characters","title":"InvalidCharacterError"},{"location":"exceptions/#invalidfilenameerror","text":"InvalidFilenameError(message: str, all_invalid_filename_list: list) message: str all_invalid_filename_list: list Raised when the name is reserved for the exclusive use of the operating system. message : A message about the error all_invalid_filename_list : String list of all disallowed filenames","title":"InvalidFilenameError"},{"location":"exceptions/#filenametoolongerror","text":"FilenameTooLongError(message: str) message: str Raised when the filename (with extension) is too long. Usually longer than 255 characters. message : A message about the error","title":"FilenameTooLongError"},{"location":"reference/","text":"Class Reference FileUrlSplit (class) Definition: FileUrlSplit(file_url: str = None) Properties: extension : str filename : str name : str path : str url : str A python class that handles file URL splits such as path, name and extension. file_url : It is an optional parameter of type str . It is the only parameter of this class , and takes as an argument, a string that represents the URL of a file. >>> file_url = FileUrlSplit(file_url='file:///home/user/book.pdf') >>> print(file_url) FileUrlSplit(\"/home/user/book.pdf\") >>> >>> file_url = FileUrlSplit(file_url='/home/user/book.pdf') >>> file_url.url '/home/user/book.pdf' >>> If the URL contains backslashes \\ , it must be escaped or passed as a raw string, like: r'c:\\path' , 'c:\\\\path' >>> file_url = FileUrlSplit(file_url=r'C:\\Windows\\user\\book.pdf') >>> file_url.url '/Windows/user/book.pdf' >>> >>> file_url = FileUrlSplit(file_url='C:\\\\Windows\\\\user\\\\book.pdf') >>> file_url.url '/Windows/user/book.pdf' >>> Also accepts string as a UrlEncode . >>> file_url = FileUrlSplit('file%3A%2F%2F%2Fhome%2Fuser%2Fbook.pdf') >>> file_url.url '/home/user/book.pdf' >>> extension (Property) FileUrlSplit.extension -> str Get file extension only, without the name and path. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.extension '.png' filename (Property) FileUrlSplit.filename -> str Filename with the extension but without the path. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.filename 'photo.png' name (Property) FileUrlSplit.name -> str Only the file name without the extension and without the path. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.name 'photo' path (Property) FileUrlSplit.path -> str Get file path only, without the file name and extension. Always ends with a slash '/' to maintain consistency. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.path '/home/user/' url (Property) FileUrlSplit.ulr -> str Cleaned of prefixes and UrlEncode. URL without the file prefix, such as \"file://\". >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.url '/home/user/photo.png'","title":"Class Reference"},{"location":"reference/#class-reference","text":"","title":"Class Reference"},{"location":"reference/#fileurlsplit","text":"(class) Definition: FileUrlSplit(file_url: str = None) Properties: extension : str filename : str name : str path : str url : str A python class that handles file URL splits such as path, name and extension. file_url : It is an optional parameter of type str . It is the only parameter of this class , and takes as an argument, a string that represents the URL of a file. >>> file_url = FileUrlSplit(file_url='file:///home/user/book.pdf') >>> print(file_url) FileUrlSplit(\"/home/user/book.pdf\") >>> >>> file_url = FileUrlSplit(file_url='/home/user/book.pdf') >>> file_url.url '/home/user/book.pdf' >>> If the URL contains backslashes \\ , it must be escaped or passed as a raw string, like: r'c:\\path' , 'c:\\\\path' >>> file_url = FileUrlSplit(file_url=r'C:\\Windows\\user\\book.pdf') >>> file_url.url '/Windows/user/book.pdf' >>> >>> file_url = FileUrlSplit(file_url='C:\\\\Windows\\\\user\\\\book.pdf') >>> file_url.url '/Windows/user/book.pdf' >>> Also accepts string as a UrlEncode . >>> file_url = FileUrlSplit('file%3A%2F%2F%2Fhome%2Fuser%2Fbook.pdf') >>> file_url.url '/home/user/book.pdf' >>>","title":"FileUrlSplit"},{"location":"reference/#extension","text":"(Property) FileUrlSplit.extension -> str Get file extension only, without the name and path. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.extension '.png'","title":"extension"},{"location":"reference/#filename","text":"(Property) FileUrlSplit.filename -> str Filename with the extension but without the path. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.filename 'photo.png'","title":"filename"},{"location":"reference/#name","text":"(Property) FileUrlSplit.name -> str Only the file name without the extension and without the path. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.name 'photo'","title":"name"},{"location":"reference/#path","text":"(Property) FileUrlSplit.path -> str Get file path only, without the file name and extension. Always ends with a slash '/' to maintain consistency. >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.path '/home/user/'","title":"path"},{"location":"reference/#url","text":"(Property) FileUrlSplit.ulr -> str Cleaned of prefixes and UrlEncode. URL without the file prefix, such as \"file://\". >>> file_url = FileUrlSplit(file_url='/home/user/photo.png') >>> file_url.url '/home/user/photo.png'","title":"url"},{"location":"tests/","text":"Tests Download the Git repository and with the terminal enter the project directory. doctest Running the main file without errors is the guarantee that the tests on the docstrings passed. python3 src/fileurlsplit.py unittest Standard library unit tests can be run as follows python3 -m unittest discover coverage Test coverage can be verified using the \"coverage\" lib. Use pip to install it. pip3 install --upgrade pip pip3 install coverage Then run the unit tests using the \"coverage\" command and then use the \"report\" argument to get the test coverage status. coverage run -m unittest discover coverage report -m","title":"Tests"},{"location":"tests/#tests","text":"Download the Git repository and with the terminal enter the project directory.","title":"Tests"},{"location":"tests/#doctest","text":"Running the main file without errors is the guarantee that the tests on the docstrings passed. python3 src/fileurlsplit.py","title":"doctest"},{"location":"tests/#unittest","text":"Standard library unit tests can be run as follows python3 -m unittest discover","title":"unittest"},{"location":"tests/#coverage","text":"Test coverage can be verified using the \"coverage\" lib. Use pip to install it. pip3 install --upgrade pip pip3 install coverage Then run the unit tests using the \"coverage\" command and then use the \"report\" argument to get the test coverage status. coverage run -m unittest discover coverage report -m","title":"coverage"},{"location":"validation/","text":"Validation details This works with an string . Use os.path.isfile() to validate an existing URL in the OS. Existing URLs vs dummy URLs Not all error checks are performed on object instantiation. This is because it is common to pass a valid URL, where the path, name and extension were taken from a real OS. The purpose of this approach is to avoid unnecessary checks. It's a bit faster and can be really significant when working with very large batches of files. When an object is instantiated, the only check performed is whether the URL passed in is an absolute URL. The other validations such as character and name error are performed using the setter , that is, when we set the value of a property (setter - setattr) If the URL wasn't taken from a real context, and for that reason you want all the error checking to be performed, then instantiate an empty object (this will automatically create a root URL like '/' ) and use the property setter url . Example: Checks only if the URL is absolute: (Use for existing URLs) >>> file_url = FileUrlSplit(file_url='/home/user/book.pdf') >>> Setter run all error checks: (Use for dummy URLs) >>> file_url = FileUrlSplit() >>> file_url.url = '/my/dummy/URL.test' >>> Setters behavior Updating a property will affect related properties. >>> print(f\"'{file_url.url}', '{file_url.filename}', '{file_url.extension}'\") '/home/user/photo.png', 'photo.png', '.png' >>> >>> file_url.extension = 'jpg' >>> >>> print(f\"'{file_url.url}', '{file_url.filename}', '{file_url.extension}'\") '/home/user/photo.jpg', 'photo.jpg', '.jpg' Useful for choosing names for multiple files without changing their extensions. >>> import os >>> from fileurlsplit import FileUrlSplit >>> >>> files = [ ... FileUrlSplit(os.path.abspath(x)) for x in os.listdir() if os.path.isfile(x) ... ] >>> for num, file_url in enumerate(files): ... print(f'old \"{file_url.url}\"') ... ... file_url.name = f'New name {num}' ... ... print(f'new \"{file_url.url}\"') ... print() ... ... old \"/home/user/fileurlsplit/src/__init__.py\" new \"/home/user/fileurlsplit/src/New name 0.py\" old \"/home/user/fileurlsplit/src/fileurlsplit.py\" new \"/home/user/fileurlsplit/src/New name 1.py\" >>>","title":"Validation details"},{"location":"validation/#validation-details","text":"This works with an string . Use os.path.isfile() to validate an existing URL in the OS.","title":"Validation details"},{"location":"validation/#existing-urls-vs-dummy-urls","text":"Not all error checks are performed on object instantiation. This is because it is common to pass a valid URL, where the path, name and extension were taken from a real OS. The purpose of this approach is to avoid unnecessary checks. It's a bit faster and can be really significant when working with very large batches of files. When an object is instantiated, the only check performed is whether the URL passed in is an absolute URL. The other validations such as character and name error are performed using the setter , that is, when we set the value of a property (setter - setattr) If the URL wasn't taken from a real context, and for that reason you want all the error checking to be performed, then instantiate an empty object (this will automatically create a root URL like '/' ) and use the property setter url . Example: Checks only if the URL is absolute: (Use for existing URLs) >>> file_url = FileUrlSplit(file_url='/home/user/book.pdf') >>> Setter run all error checks: (Use for dummy URLs) >>> file_url = FileUrlSplit() >>> file_url.url = '/my/dummy/URL.test' >>>","title":"Existing URLs vs dummy URLs"},{"location":"validation/#setters-behavior","text":"Updating a property will affect related properties. >>> print(f\"'{file_url.url}', '{file_url.filename}', '{file_url.extension}'\") '/home/user/photo.png', 'photo.png', '.png' >>> >>> file_url.extension = 'jpg' >>> >>> print(f\"'{file_url.url}', '{file_url.filename}', '{file_url.extension}'\") '/home/user/photo.jpg', 'photo.jpg', '.jpg' Useful for choosing names for multiple files without changing their extensions. >>> import os >>> from fileurlsplit import FileUrlSplit >>> >>> files = [ ... FileUrlSplit(os.path.abspath(x)) for x in os.listdir() if os.path.isfile(x) ... ] >>> for num, file_url in enumerate(files): ... print(f'old \"{file_url.url}\"') ... ... file_url.name = f'New name {num}' ... ... print(f'new \"{file_url.url}\"') ... print() ... ... old \"/home/user/fileurlsplit/src/__init__.py\" new \"/home/user/fileurlsplit/src/New name 0.py\" old \"/home/user/fileurlsplit/src/fileurlsplit.py\" new \"/home/user/fileurlsplit/src/New name 1.py\" >>>","title":"Setters behavior"}]}